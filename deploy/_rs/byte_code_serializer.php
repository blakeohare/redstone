<?
	class ByteCodeItem {
		public $int_values;
		public $string_value;
		
		public function __construct($int_values, $string_value) {
			$this->int_values = $int_values;
			$this->string_value = $string_value;
		}
	}
	
	class ByteCodeSerializer {
		private $is_test;
		
		public function __construct($is_test = false) {
			$this->is_test = $is_test;
		}
		
		/**
		 * When the is_test bit is true, all functions annotated with @Test will be culled from 
		 * the final generated byte code.
		 */
		public function serialize_parse_tree($parse_tree) {
			$buffer = array();
			foreach ($parse_tree as $line) {
				if (!$this->is_test && $line instanceof FunctionDeclaration) {
					// TODO: check for Test annotation and remove it.
				}
				
				$this->serialize_item(&$buffer, $line);
			}
			
			return $buffer;
		}
		
		public function serialize_item($buffer, $item) {
			// temporary to test the storage serializer
			array_push($buffer, new ByteCodeItem(array(1, 2, 3), 'foo: '.$item));
		}
	}
?>